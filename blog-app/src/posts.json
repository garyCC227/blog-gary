{
    "LastID": 5,
    "blogs": {
        "156789123456": {
            "id": 156789123456,
            "title": "RESTful API with Spring framework",
            "author": "Linchen Chen",
            "date": "Jan 16 2021",
            "tag": [
                "API"
            ],
            "file":"Spring_RESTful.md",
            "content": "### What is RESTful??\n***\n***REST(Representational State Transfer)***, is an architectureal style for providing standards between computer systems on the web, making it easier for systems to communicate with each other. The following are the major features of RESTful.\n##### 1. Stateless\nSystems that follow the REST paradigm are stateless, meaning that the server doesn't need to know the state of the client, or vice versa. The only important thing is the resource. In this way, the client and server can understand any message received, event without seeing previous state.\n\n##### 2. Separation of Client and Server\nBy separating the user interface concerns from the data storage concerns, we improve the portability of the user interface across multiple platforms and improve scalability by simplifying the server components. We need to consider this when we develope the design. One good implementation is -> You can always add columns (fields) to a database table. But don\u2019t take one away. The principle in RESTful services is the same.\n\n##### 3. Cacheable\nCache constraints require that the data within a response to a request be implicitly or explicitly labeled as cacheable or non-cacheable. If a response is cacheable, then a client cache is given the right to reuse that response data for later, equivalent requests.\n\n##### 4. Uniform interface\nThe interface need to be uniform that can allow independent evolution of the application without having other side effect. such as using HTTP with URL resources, CURD and JSON for client to use.\n##### 5. Layered System\nAs the name implies, the RESTful system is comprised of layers, each layer has its own specific functionality and responsibility. e.g. MVC framework \n\n#### Resource(response) in RESTful API \nThe most significant thing in RESTful is resource. The state of the resource at any particular timestamp is known as resource representation. A representation consists of data, metadata describing the data and hypermedia links which can help the clients in transition to the next desired state. such as using HATEOAS package to format the resource as [HAL](https://en.wikipedia.org/wiki/Hypertext_Application_Language) style.\n\n### RESTful API with Spring\n***\n***How to use Spring to build RESTful API***\nIn Spring, we use the web MVC framework to wrap RESTful application into web layer, and use MVC architecture to handle the incoming request and return resource to client.\n\n![RESTful-flow char](https://raw.githubusercontent.com/garyCC227/blog-gary/gary/blog-app/src/content/RESTful.png)\n\nThere are 3 major componenets in MVC framework. \nThe first Component is **Dispatcher Servlet**, there are two tasks in dispathcer servlet.\n>1.  recieving incoming request, and map it to the specific controller;\n>2. the response to Client.\n\nThe 2nd component is  called **Controller**, there are also 2 tasks in the controller; \n>1. Action Mapping, which is  mapping the incoming URL endpoints with the HTTP method to get the specific resource with 3rd Component Model. So, The HTTP method are the 4 standard one, GET, POST, PUT, DELETE, which is included in the incoming request. \n>2. Return the recieved resource to the dispatcher servlet, then return to the Client. But normally in this task, we woulid like to format the resource with a better respentation before returning it, to make our application more RESTful. So one of the package in Spring call HATEOAS, we can use this package to format the resource with the HAL style to remove some side effect, so it can make our application more RESTful. \n\nthe 3rd component is **Model**, \n> 1. its task is to get the specific resource for the request, and return it to controller. in order to get the resource,  we use a thing call JPA repository. each JPA repository manage one domain object, and has CRUD method(which is create,...) and query execution and pagination method to interact with the database to get the resource.\n\n***Flow Process***\n1. HTTP request send to dispatcher servlet, DS forward the request to handler mapping\n2. handler mapping map the  request to specific Contoller\n3. Contoller does action mapping with the URL endpoints and actions to know what resource it want, and then ask Model to get it\n4. In Model, it use repository method to interact with databse to get the resource, and return resource to controller\n5. Controller format the resource with a good representional style, one of the style is HAL. which can be implemented by Spring HATEOAS package.\n6. return the resourece as response to client \n\n### JPA Repository \n***\n- Spring Data JPA repositories are interfaces with methods supporting creating, reading, updating, and deleting records against a back end data store\n - The JpaRepository is subclass of CRUD and PagingAndSort([JAVA repository solution](https://docs.spring.io/spring-data/jpa/docs/current/reference/html/#repositories)). As you might guess from its name, the CrudRepository interface defines a repository that offers standard create, read, update and delete operations. The PagingAndSortingRepository extends the CrudRepository and adds findAll methods that enable you to sort the result and to retrieve it in a paginated way. Both interface are also supported by other Spring Data projects, so that you can apply the same concepts to different datastores. The JpaRepository adds JPA-specific methods, like flush() to trigger a flush on the persistence context or findAll(Example<S> example) to find entities by example, to the PagingAndSortingRepository. \n \n***\n##### My Simple RESTful API implementation with Spring framework\n[Github Repository](https://github.com/garyCC227/RESTful_simple)\n\n\n\n##### More things are coming\n***gradle and pom***\n\n\n\n \n"
        },
        "234568123456": {
            "id": 234568123456,
            "title": "MUST HAVE vscode extensions",
            "author": "Linchen Chen",
            "date": "Jan 23 2021",
            "tag": [
                "Other"
            ],
            "file":"vscode-setup.md",
            "content": "####\nHere are my vscode extensions, make my life easier.\n\n# Utilities\n***\n### *1.Bracket Pair Colorizer*\nThis extension allow you colorize mathching brackets.\n<br/>\n![bracket_pair](https://raw.githubusercontent.com/garycc227/blog-img/main/vscode-setup/bracket.PNG)\n\n### *2.Code Spell Checker*\nA basic spell checker that works with camelCase code, also can help with commenting<br/>\n![code_spell](https://raw.githubusercontent.com/garycc227/blog-img/main/vscode-setup/code_spell.gif)\n\n### *3.file-icons*\nA extension help you with better visualize your file tree<br/>\n![code_spell](https://raw.githubusercontent.com/garycc227/blog-img/main/vscode-setup/file-icons.PNG)\n\n### *4.Prettier - Code formatter*\nThe best code formatter I've found for Javascript, TypeScript, JSON, CSS, HTML\n\n### *6.Setting Sync*\nI use this extension to synchronize my vscode setting and extensions, it can also support to syn themes, file icons, etc. Help me to better manage my vscode setting and extension, and keep my vscode setup consistent for all my computers.\n\n### *7.DuplicateSelection*\nI believe this will be the favorite extension for every programmers. It provides short-cut that select the duplicates base on the current selection. Make you easier to modify same variables or words.\ndefault Short-cut: Ctrl+D \n\n### *8.Visual Studio IntelliCode*\nThe Visual Studio IntelliCode extension provides AI-assisted development features for Python, TypeScript/JavaScript and Java developers in Visual Studio Code, with insights based on understanding your code context combined with machine learning..<br/>\n![code_spell](https://raw.githubusercontent.com/garycc227/blog-img/main/vscode-setup/python-intellicode.gif)\n\n### *9.Dracula Official*\nMy vscode extension<br/>\n![code_spell](https://raw.githubusercontent.com/garycc227/blog-img/main/vscode-setup/Dracula_Official.png)\n\n# HTML/CSS/JS/REACT Extensions\n***\n\n### *1.Babel JavaScript*\nSyntax highlight for ES201x, React JSX<br/>\n![babel](https://raw.githubusercontent.com/garycc227/blog-img/main/vscode-setup/babel-javascript.png)\n\n### *2.Emmet JSS*\nJSS snippets<br/>\n![Emmet](https://raw.githubusercontent.com/garycc227/blog-img/main/vscode-setup/emmetJSS.gif)\n\n### *3.ES7 React/Redux/GraphQL/React-Native snippets*\nThe best snippets I've found for ES7 React, check out methods they provide \\in here [documentation](https://marketplace.visualstudio.com/items?itemName=dsznajder.es7-react-js-snippets)\n\n### *4.ESLint*\nIntegrates [ESLint](https://eslint.org/) into VS Code.\n\n### *5.eslint-disable-snippets*\nsnippets for disable eslint rules.\n* Start typing eslint-disable in a javascript .js, javascriptreact .jsx, typescript .ts or typescriptreact .tsx file to trigger the snippet autocomplete.\n* Type the rule you want to disable or leave empty to disable all rules.\n* Press tab to drop your cursor at a helpful position.\n* Press ctrl+\u2193(win) option+\u2193(mac) to move the current line down. This is useful if you are wrapping a block of code.<br/>\n![eslint-disable](https://raw.githubusercontent.com/garycc227/blog-img/main/vscode-setup/eslint-disable.gif)\n\n### *6.Auto Rename Tag*\nAutomatically rename paired HTML/XML tag.<br/>\n![auto-rename](https://raw.githubusercontent.com/garycc227/blog-img/main/vscode-setup/auto-rename.gif)\n\n### *6.htmltagwrap*\nWraps selected code with HTML tags, Default with ***\"ALT + W\"***<br/>\n![htmlwrap](https://raw.githubusercontent.com/garycc227/blog-img/main/vscode-setup/html-wrap.gif)\n\n\n\n"
        },
        "395247123456": {
            "id": 395247123456,
            "title": "Python Collection Module",
            "author": "Linchen Chen",
            "date": "Jan 24 2021",
            "tag": [
                "Coding"
            ],
            "file":"py_collections.md",
            "content": "# Python Collection Module\n\n## 1. Default dict methods\n\n|Method  |Description  |\n|:------:|:-------------|\n`clear()`|\tRemoves all the elements from the dictionary\n`copy()`\t|Returns a copy of the dictionary\n`fromkeys()`\t|Returns a dictionary with the specified keys and value |\n`get(key[,default])`\t|Returns the value of the specified key, if default is not given, it defaults to `None`\n`items()`\t|Returns a list containing a tuple for each key value pair\n`keys()`\t|Returns a list containing the dictionary's keys\n`pop(key[, default])`\t|Removes the element with the specified key\n`popitem()`\t|Removes the last inserted key-value pair\n`setdefault(key[,default])`\t|Returns the value of the specified key. If the key does not exist: insert the key, with the specified value\n`update([other])`\t|Updates the dictionary with the specified key-value pairs;update() accepts either another dictionary object or an iterable of key/value pairs (as tuples or other iterables of length two). If keyword arguments are specified, the dictionary is then updated with those key/value pairs: d.update(red=1, blue=2)\n`values()`\t|Returns a list of all the values in the dictionary\n`list(d)`|return a list of all the keys\n`len(d)`| return the number of items in the dictionary\n`key in d` | return `True` if *d* has a key *key*, else `False` \n`iter(d)` | == `iter(d.keys())`\n`reversed(d)` | == `reversed(d.keys())` : iterator of the keys\n\n\n>- **dict.fromkeys()**\n>>```Python\n>>x = ('key1', 'key2', 'key3')\n>>dict.fromkeys(x)\n>>#{'key1': None, 'key2': None, 'key3': None}\n>>```\n\n>- **`|` Union**(python 3.9). If a key appears in both operands, the last-seen value (i.e. that from the right-hand operand) wins \n>>```Python\n>>> d = {'spam': 1, 'eggs': 2, 'cheese': 3}\n>>> e = {'cheese': 'cheddar', 'aardvark': 'Ethel'}\n>>> d | e\n>>{'spam': 1, 'eggs': 2, 'cheese': 'cheddar', 'aardvark': 'Ethel'}\n>>> e | d\n>>{'cheese': 3, 'aardvark': 'Ethel', 'spam': 1, 'eggs': 2}\n>>```\n\n- `|=`(python 3.9)\n```Python\n>>> d |= e\n>>> d\n{'spam': 1, 'eggs': 2, 'cheese': 'cheddar', 'aardvark': 'Ethel'}\n```\n\n# 2. Collections - Table of Contents \nWill talk about the following collections\n- Counter\n- defaultDict\n- OrderedDict\n- \n## 3. Counter\n#### 3.1 Definition:\nA `Counter` is a `dict` subclass for counting hashable objects. key as element, value as counts.\nCounts are allowed to be any integer value including zero or negative counts.\n\n#### 3.2 Initialization 1\n> ```Python\n>c = Counter('gallahad')                # a new counter from an iterable\n>#Counter({'g': 1, 'a': 3, 'l': 2, 'h': 1, 'd': 1})\n>c = Counter({'red': 4, 'blue': 2})     # a new counter from a mapping\n># c: Counter({'red': 4, 'blue': 2})\n>c = Counter(cats=4, dogs=8)            # a new counter from keyword args\n># c: Counter({'cats': 4, 'dogs': 8})\n>```\n\n#### 3.3 Initialization 2\n>```Python\n>c = Counter(['eggs', 'ham'])\n>c['bacon']                              # count of a missing element is zero\n># 0\n>```\n\n#### 3.4 deletion:\n>Setting a count to zero does not remove an element from a counter. Use del to remove it entirely:\n>```Python\n>c['sausage'] = 0                        # counter entry with a zero count\n>del c['sausage]\n>```\n\n####  3.5 methods\n- `elements()`\n>```Python\n>c = Counter(a=4, b=2, c=0, d=-2)\n>sorted(c.elements())\n>#['a', 'a', 'a', 'a', 'b', 'b']\n>```\n\n- `most_common([n])` : return a list of the n most common elements and their counts from the most common to the least, if *n* is ommitted or `None`, it will return all elements\n>```Python\n>Counter('aaabbcc').most_common(2)\n>#[('a', 3), ('b', 2)]\n>```\n\n- `subtract()`\n>```Python\n>a = Counter('aaabbcc')\n>b = Counter('abc')\n>a.subtract(b)\n> #Counter({'a': 2, 'b': 1, 'c': 1})\n>```\n\n- `fromkeys(iterable)` not implemented\n- `update(iterable-or-mapping)` like `dict.update()`, add counts instead of replacing them; Also expect to be a sequence of elements, not a sequence of `(key, value)` paris.\n- Unary addition and subtraction are shortcuts for adding an empty counter or subtracting from an empty counter.\n```Python\nc = Counter(a=2, b=-4)\n+c\n#Counter({'a': 2})\n-c\n#Counter({'b': 4})\n```\n\n##### Note: Only use `Counter` for postive counts\n\n![Counter](https://raw.githubusercontent.com/garycc227/blog-img/main/py-collection/counter.PNG)\n## 4. defaultdict\n\n#### 4.1 definition\n`defaultdict([default_factory])` is a subclass of the built-in `dict` class. It overrides one method and adds one writable instance variable. The remaining functionality is the same as for the `dict` class.\n\nThe first argument provides the initial value for the `default_factory` attribute; it defaults to `None`. All remaining arguments are treated the same as if they were passed to the `dict` constructor, including keyword arguments.\n\n\n#### 4.2 default_factory\n`defaultdict` is similar to `dict`, but it has `default_factory` to set the default value for key;\n`defaultdict` has to be a `func`\n\n![Counter](https://raw.githubusercontent.com/garycc227/blog-img/main/py-collection/defaultdict.PNG)\n## 5.OrderedDict([items])\n\n##### 5.1 definition \n`dict` with specific order, LIFO(`last=True`) or FIFO for `popitem` and `move_to_end`\n\n##### 5.2 method\n- `popitem(last=True)` \n- `move_to_end(key, last=True)`\n```Python \nd = OrderedDict.fromkeys('abcd')\nd.move_to_end('a')\n''.join(d.keys()) #bcda\n\nd.move_to_end('a', last=False)\n''.join(d.keys()) #abcd\n```\n\n- support `reversed`\n- support `|` merge and `|=` update\n![ordereddict](https://raw.githubusercontent.com/garycc227/blog-img/main/py-collection/ordereddict.PNG)\n"
        },
        "68716579425": {
            "id": 68716579425,
            "title": "BinaryTree Coding 1",
            "author": "Linchen Chen",
            "date": "Feb 16 2021",
            "tag": [
                "Coding"
            ],
            "file":"binaryTree1.md",
            "content": "# Binary Tree LeetCode Question\n---\n### `1. Inorder Tree Traversal(94)`\n***difficulty: medium***\n***Link: [leetcode link](https://leetcode.com/problems/binary-tree-inorder-traversal/)***\n#### Solution\n\n##### 1. Iterative \n`time complexity: O(n)`\n`space complexity:O(h)`\n```Python\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nfrom collections import deque\nclass Solution:\n    def inorderTraversal(self, root: TreeNode) -> List[int]:\n        s = deque()\n        res = []\n        curr = root\n        \n        while True:\n            if curr is not None:\n                s.append(curr)\n                curr = curr.left\n                \n            elif(s):\n                curr = s.pop()\n                res.append(curr.val)\n                curr = curr.right\n            \n            else:\n                break\n                \n        return res\n```\n\n##### 2. Recursive\n`time complexity: O(n)`\n`space complexity:O(n)`\n```Python\nclass Solution:\n    def inorderTraversal(self, root: TreeNode) -> List[int]:\n        res = []\n        self.solution(root, res)\n                \n        return res\n    \n    def solution(self, node, res):\n        if node == None:return\n        self.solution(node.left, res)\n        res.append(node.val)\n        self.solution(node.right, res)\n```\n\n\n## `2.Same BinaryTree(100)`\n***difficulty: easy***\n***Link: [leetcode link](https://leetcode.com/problems/same-tree/)***\n#### Solution\n`time complexity: O(n)`\n`space complexity: null`\n```Python\n# Author:Linchen chen # Date\uff1a16/02/2021\nclass Solution:\n  def isSameTree(self, p: TreeNode, q: TreeNode) -> bool:\n      if p is None and q is None: return True\n      if p is None or q is None: return False # if either of the node is empty\n      if p.val != q.val: return False # compare node.value\n      else:\n        return (True and\n               self.isSameTree(p.left, q.left) and \n                self.isSameTree(p.right, q.right)\n               )\n```\n\n## `3.Binary levelOrder traversal(102)`\n***difficulty: medium***\n***Link: [leetcode link](https://leetcode.com/problems/binary-tree-level-order-traversal/)***\n#### Solution\n`time complexity: O(n)`\n`space complexity: O(n)`\n\n```Python\n# Author:Linchen chen # Date\uff1a16/02/202\nclass Solution:\n    def levelOrder(self, root: TreeNode) -> List[List[int]]:\n      lvl = 0; ans = []\n      self.levelOrderSolution(root, lvl, ans)\n      return ans\n    \n    # DFS\n    def levelOrderSolution(self, node:TreeNode, lvl:int, ans:List[List[int]]) -> None:\n      if node is None: return\n      if lvl >= len(ans):\n        ans.append([node.val])\n      else:\n        ans[lvl].append(node.val)\n        \n      self.levelOrderSolution(node.left, lvl+1, ans)\n      self.levelOrderSolution(node.right, lvl+1, ans)\n```\n\n## `4.BinaryTree pruning(814)`\n***difficulty: medium***\n***Link: [leetcode link](https://leetcode.com/problems/binary-tree-pruning/)***\n#### Solution, fastest solution in leetcode\n`time complexity: O(n)`\n`space complexity: O(n)`\n```c++\n//C++ solution, Linchen Chen, 16/02/2021\nclass Solution {\npublic:\n  TreeNode* pruneTree(TreeNode* root) {\n    if(!root) return root;\n    root->left = pruneTree(root->left);\n    root->right = pruneTree(root->right);\n    if(root->val == 1 || root->left || root->right){\n      return root;\n    }\n    return nullptr;\n  }\n};\n```\n\n## `5.Path Sum(112)`\n***difficulty: easy***\n\n***Link: [leetcode link](https://leetcode.com/problems/path-sum/)***\n#### Solution\n`time complexity: O(n)`\n\n`space complexity: Null`\n```Python\nclass Solution:\n    def hasPathSum(self, root: TreeNode, targetSum: int) -> bool:\n        if not root: return False\n        return self.sol(root, 0, targetSum)\n    \n    def sol(self, node: TreeNode, partSum:int, targetSum:int) -> bool:\n        if node.left and node.right:\n            return (self.sol(node.left, partSum + node.val, targetSum) or\n                    self.sol(node.right, partSum + node.val, targetSum))\n        elif node.left:\n            return self.sol(node.left, partSum + node.val, targetSum)\n        elif node.right:\n            return self.sol(node.right, partSum + node.val, targetSum)\n        else:\n            #check path sum\n            if partSum + node.val == targetSum:\n                return True\n            else:\n                return False\n```\n\n## `6.Sum root to leaf number(129)`\n***difficulty: easy***\n\n***Link: [leetcode link](https://leetcode.com/problems/sum-root-to-leaf-numbers/)***\n#### Solution\n`time complexity: O(n)`\n\n`space complexity: Null`\n\n```Python\nclass Solution:\n    def sumNumbers(self, root: TreeNode) -> int:\n        if not root: return 0\n        ans = self.solution(root, 0)\n        return ans\n    \n    def solution(self, node:TreeNode, subSum: int) -> None:\n\n        if node.left and node.right:\n            return (self.solution(node.left, subSum * 10 + node.val) +\n            self.solution(node.right, subSum * 10 + node.val))\n        elif node.left:\n            return self.solution(node.left, subSum * 10 + node.val)\n        elif node.right:\n            return self.solution(node.right, subSum * 10 + node.val)\n        else:\n            \n            return subSum*10 + node.val \n```\n"
        }
    },
    "tags": {
        "API": {
            "id": "1",
            "className": "ui pink label"
        },
        "Coding": {
            "id": "2",
            "className": "ui blue label"
        },
        "Other": {
            "id": "3",
            "className": "ui red label"
        }
    },
    "works": {
        "1001": {
            "logo": "logo1.svg",
            "title": "Maker Game",
            "desc": "Due to COVID effect, migration occur often in India. Thus, We help Pollinate Group to develope a data visualization tool to help with visualizing slum data. We utilize ReactJS to visualize slum data over a satellite map, and train a model  to detect slum with satellite image",
            "link": "https://github.com/garyCC227/makergame",
            "category": "Complete",
            "tags": [
                "ReactJS web",
                "ML",
                "data analysis"
            ]
        },
        "1002": {
            "logo": "logo2.svg",
            "title": "Skin Cancer App",
            "desc": "React-native mobile app to detect skin cancer, such as Melanoma. We construct and train an image classification model to detect Melanoma in Pytorch, and build a API to connect the model with front-end ",
            "link": "https://github.com/garyCC227/skin_cancer_app",
            "category": "Complete",
            "tags": [
                "ML",
                "API",
                "React-Native"
            ]
        },
        "1003": {
            "logo": "logo3.svg",
            "title": "Puzzle Game",
            "desc": "A 2D graphic puzzle game develope in Java, and we generate the puzzle with our own and amazing algorithm",
            "link": "https://github.com/garyCC227/2511-project",
            "category": "Complete",
            "tags": [
                "Java"
            ]
        },
        "1004": {
            "logo": "logo.svg",
            "title": "Spring RESTful API",
            "desc": "A simple RESTful API that builds with Java and Spring framework",
            "link": "https://github.com/garyCC227/RESTful_simple",
            "category": "Complete",
            "tags": [
                "API",
                "Java",
                "Spring"
            ]
        },
        "1005": {
            "logo": "logo.svg",
            "title": "Thesis",
            "desc": "Honour thesis in domain adaptation and image classification research.",
            "link": "https://github.com/garyCC227/thesisWork",
            "category": "Complete",
            "tags": [
                "Python",
                "ML",
                "transfer learning"
            ]
        }
    }
}